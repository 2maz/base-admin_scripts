#! /usr/bin/env ruby
# This script allows to setup an OSB directory using a package from the ubuntu archive
# The resulting directory is created in the current working directory
#
# http://en.opensuse.org/openSUSE:Build_Service_Concept_SourceService

# To have the package available on the target platform a _service file is created:
#
# <services>
# <service name="download_url">
#     <param name="host">archive.ubuntu.com</param>
#     <param name="path">/ubuntu/pool/multiverse/c/cgal/cgal_3.9-1build1.dsc</param>
# </service>
#
# <service name="download_url">
#     <param name="host">archive.ubuntu.com</param>
#     <param name="path">/ubuntu/pool/multiverse/c/cgal/cgal_3.9.orig.tar.gz</param>
# </service>
#
# <service name="download_url">
#     <param name="host">archive.ubuntu.com</param>
#     <param name="path">/ubuntu/pool/multiverse/c/cgal/cgal_3.9-1build1.diff.gz</param>
# </service>
# </services>
#
require 'fileutils'
require 'optparse'

o_validate = false
o_verbose = false
o_selected_packages = []

options = OptionParser.new do |opt|
    opt.banner = "Usage: obs_ubuntu_universe_package [options]"
    opt.separator "Description: Allows to setup an import service, to load existing ubuntu universe packages"
    opt.on('--validate', 'Check it the given package is provided as osdeps by the current operating system') do
        o_validate = true
    end
    opt.on_tail("-v","--verbose", "Show verbose output") do
        o_verbose = true
    end
    opt.on_tail("-h","--help", "Show this message") do
        puts opt
        exit
    end

end

o_selected_packages = options.parse(ARGV)

o_selected_packages.each do |required_name|
    record = `apt-cache showsrc #{required_name}`.split("\n").map(&:strip)
    if record.empty?
        if not o_validate
            raise ArgumentError, "obs_ubuntu_universe_package: cannot retrieve package '#{required_name}'"
        end
    elsif o_validate
        puts "Record found for '#{required_name}'"
    end

    if o_verbose
        puts record
    end

    if not o_validate
        package_name = record.find { |line| line =~ /^Package:/ }.gsub(/^Package:\s*/, '')
        dir = record.find { |line| line =~ /^Directory:/ }.gsub(/^Directory:\s*/, '')
        files = nil
        record.each do |line|
            if files
                if line =~ /^[0-9a-f]+\s+[0-9a-f]+\s+(.*)$/
                    files << $1
                else break
                end
            elsif line =~ /^Files:/
                files = []
            end
        end

        entries = files.map do |f|
            srv_entry =<<-EOD
        <service name="download_url">
            <param name="host">archive.ubuntu.com</param>
            <param name="path">/ubuntu/#{dir}/#{f}</param>
        </service>
            EOD
        end

        FileUtils.mkdir_p package_name
        File.open(File.join(package_name, '_service'), 'w') do |io|
            io.puts "<services>"
            io.puts entries.join("\n")
            io.puts "</services>"
        end
        if o_verbose
            puts "Entries:\n#{entries.join("\n")}"
            puts "Successfully created package folder: '#{package_name}'"
        end
    end
end
